<?xml version="1.0" encoding="UTF-8" ?>
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>io.github.sichengtech</groupId>
    <artifactId>rsf-core</artifactId>
    <version>1.3.7</version>
    <packaging>jar</packaging>

    <!-- 为了发布自己的jar包到Maven中央仓库，添加了以下配置，Sonatype仓库便是Maven中央仓库指定的暂存库 -->
    <!-- 项目 URL 、SCM信息、开发者信息 -->
    <name>${project.artifactId}</name>
    <description>RSF远程服务调用框架</description>
    <url>https://github.com/sichengtech/rsf-core</url>
    <scm>
        <url>https://github.com/sichengtech/rsf-core</url>
        <connection>https://github.com/sichengtech/rsf-core.git</connection>
        <developerConnection>https://github.com/sichengtech/rsf-core.git</developerConnection>
        <tag>HEAD</tag>
    </scm>
    <developers>
        <developer>
            <id>sichengtech</id>
            <name>sichengtech</name>
            <email>admin@sicheng.net</email>
            <url>http://www.sicheng.net</url>
            <timezone>+8</timezone>
        </developer>
    </developers>
    <licenses>
        <license>
            <name>木兰公共许可证,第2版（Mulan PubL v2）</name>
            <url>http://license.coscl.org.cn/MulanPubL-2.0</url>
        </license>
    </licenses>

    <dependencies>
        <dependency>
            <groupId>org.apache.mina</groupId>
            <artifactId>mina-core</artifactId>
            <version>2.0.7</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.6.1</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.6.1</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.10</version>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.3</version>
        </dependency>

        <dependency>
            <groupId>org.dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>2.1.3</version>
        </dependency>

        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>3.28.0-GA</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring</artifactId>
            <version>2.5.6</version>
        </dependency>

        <!-- 一个加解密的工具 -->
        <dependency>
            <groupId>com.hc360</groupId>
            <artifactId>hasclient</artifactId>
            <version>1.0</version>
        </dependency>

        <!-- 配置中心的客户端 -->
        <dependency>
            <groupId>com.hc360</groupId>
            <artifactId>configure-client</artifactId>
            <version>1.4.0</version>
        </dependency>

        <dependency>
            <groupId>org.jboss.netty</groupId>
            <artifactId>netty</artifactId>
            <version>3.2.10.Final</version>
        </dependency>
    </dependencies>



    <!-- 为了发布自己的jar包到Maven中央仓库，添加了以下一套配置 -->
    <!-- 发布到 Maven 仓库中的所有文件都要使用 GPG 签名，以保障完整性。GPG 的主要作用是生成密钥对,并签名。
    由于使用 GPG 对Javadoc、jar、源代码进行签名是一个非常耗时的过程，因此通常将这些任务与日常的构建要隔离开来，方式是把这套配置移入到profiles标签表示的环境中。
    然后，当通过激活id为deploy-to-ossrh环境的配置，就可执行向ossrh仓库的部署任务，就可发布自己的jar包到Maven中央仓库，结构如下： -->
    <profiles>
        <profile>
            <id>deploy-to-ossrh</id>  <!-- id为deploy-to-ossrh环境配置 -->
            <build>
                <plugins>
                    <!-- Source 插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>3.1.1</version>
                    </plugin>
                    <!-- Source -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>3.2.1</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Javadoc 插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>3.2.0</version>
                        <configuration>
                            <charset>UTF-8</charset>
                            <docencoding>UTF-8</docencoding>
                            <show>package</show>
                            <tags>
                                <tag>
                                    <name>date</name>
                                </tag>
                            </tags>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <configuration>
                                    <doclint>none</doclint>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Gpg Signature GPG 签名插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <!-- id 与 setting.xml 的 gpg 配置中的 id 对应,用于取到密码-->
                                <id>ossrh</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Maven 部署流程插件 Nexus Staging Maven -->
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <version>1.6.13</version>
                        <extensions>true</extensions>
                        <configuration>
                            <!-- 与 setting.xml 的 server 配置中的 sonatype-release 对应,用于取到账号与密码-->
                            <serverId>sonatype-release</serverId>
                            <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
                            <autoReleaseAfterClose>true</autoReleaseAfterClose>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <!--指定Maven分发构件Deploy上传jar包时的nexus仓库地址-->
            <!--Sonatype仓库便是Maven中央仓库指定的暂存库，会自动同步到Maven中央仓库 -->
            <distributionManagement>
                <snapshotRepository>
                    <id>sonatype-snapshots</id>
                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
                </snapshotRepository>
                <repository>
                    <id>sonatype-release</id>
                    <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
                </repository>
            </distributionManagement>
        </profile>
    </profiles>

</project>
